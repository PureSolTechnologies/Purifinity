/***************************************************************************
 *
 *   CodeRangeAnalysisBrowser.java
 *   -------------------
 *   copyright            : (c) 2009 by PureSol-Technologies
 *   author               : Rick-Rainer Ludwig
 *   email                : ludwig@puresol-technologies.com
 *
 ***************************************************************************/

package com.puresol.gui.coding;

import java.awt.BorderLayout;
import java.io.File;

import javax.i18n4java.Translator;
import javax.swing.JSplitPane;
import javax.swing.border.TitledBorder;
import javax.swingx.Panel;
import javax.swingx.TabbedPane;
import javax.swingx.connect.Slot;

import com.puresol.coding.CodeRange;
import com.puresol.coding.CodeRangeType;
import com.puresol.coding.ProgrammingLanguage;
import com.puresol.coding.analysis.Analyzer;
import com.puresol.coding.analysis.ProjectAnalyzer;
import com.puresol.gui.TreeViewer;
import com.puresol.gui.uhura.CodeRangeViewer;
import com.puresol.uhura.ast.ParserTree;

/**
 * The code range browser show all analyzed files and their analyzable code
 * ranges. The user has the chance to look into the source code and into the
 * parser tree generated by the parser.
 * 
 * @author Rick-Rainer Ludwig
 * 
 */
public class CodeRangeBrowser extends Panel {

	private static final long serialVersionUID = 3469716304984536673L;

	private static final Translator translator = Translator
			.getTranslator(CodeRangeBrowser.class);

	private final CodeRangeChooser codeRangeChooser = new CodeRangeChooser();
	private final CodeRangeViewer codeRangeViewer = new CodeRangeViewer();
	private final TreeViewer<ParserTree> parserTreeViewer = new TreeViewer<ParserTree>();
	private final CodeRangeEvaluatorPanel codeRangeEvaluatorPanel = new CodeRangeEvaluatorPanel();

	private ProjectAnalyzer project = null;

	public CodeRangeBrowser() {
		super();
		initUI();
	}

	public CodeRangeBrowser(ProjectAnalyzer project) {
		super();
		initUI();
		setProjectAnalyser(project);
	}

	private void initUI() {
		codeRangeChooser.connect("fileChanged", this, "showFile", File.class);
		codeRangeChooser.connect("codeRangeChanged", this, "showCodeRange",
				CodeRange.class);

		TabbedPane tabbedViewer = new TabbedPane();
		tabbedViewer.setBorder(new TitledBorder(translator
				.i18n("Analysis Content")));
		tabbedViewer.add(translator.i18n("Source Code"), codeRangeViewer);
		tabbedViewer.add(translator.i18n("Parser Tree"), parserTreeViewer);
		tabbedViewer.addTab(translator.i18n("CodeRange Evaluators"),
				codeRangeEvaluatorPanel);

		setLayout(new BorderLayout());

		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,
				true, codeRangeChooser, tabbedViewer);
		add(splitPane, BorderLayout.CENTER);
	}

	public void setProjectAnalyser(ProjectAnalyzer project) {
		this.project = project;
		codeRangeChooser.setProjectAnalyser(project);
		codeRangeViewer.setCodeRange(new CodeRange("", CodeRangeType.FILE,
				new ParserTree("")));
		parserTreeViewer.setTreeData(new ParserTree(""));
		codeRangeEvaluatorPanel.setProjectAnalyser(project);
	}

	@Slot
	public void showFile(File file) {
		Analyzer analyzer = project.getAnalyzer(file);
		ParserTree parserTree = analyzer.getParserTree();
		ProgrammingLanguage language = analyzer.getLanguage();

		codeRangeViewer.setCodeRange(language.getAnalyzableCodeRanges(
				parserTree).get(0));
		parserTreeViewer.setTreeData(parserTree);
		codeRangeEvaluatorPanel.setFile(file);
	}

	@Slot
	public void showCodeRange(CodeRange codeRange) {
		ParserTree parserTree = codeRange.getParserTree();
		codeRangeViewer.setCodeRange(codeRange);
		parserTreeViewer.setTreeData(parserTree);
		codeRangeEvaluatorPanel.setCodeRange(codeRange);
	}

}
