/***************************************************************************
 *
 *   CodeRangeAnalysisBrowser.java
 *   -------------------
 *   copyright            : (c) 2009 by PureSol-Technologies
 *   author               : Rick-Rainer Ludwig
 *   email                : ludwig@puresol-technologies.com
 *
 ***************************************************************************/

package com.puresol.gui.coding;

import java.awt.BorderLayout;
import java.io.File;

import javax.i18n4java.Translator;
import javax.swing.JSplitPane;
import javax.swing.border.TitledBorder;
import javax.swingx.Panel;
import javax.swingx.TabbedPane;
import javax.swingx.connect.Slot;

import com.puresol.coding.CodeRange;
import com.puresol.coding.analysis.ProjectAnalyzer;
import com.puresol.gui.uhura.CodeRangeViewer;
import com.puresol.gui.uhura.ParserTreeViewer;
import com.puresol.uhura.ast.ParserTree;

/**
 * The code range browser show all analyzed files and their analyzable code
 * ranges. The user has the chance to look into the source code and into the
 * parser tree generated by the parser.
 * 
 * @author Rick-Rainer Ludwig
 * 
 */
public class CodeRangeBrowser extends Panel {

	private static final long serialVersionUID = 3469716304984536673L;

	private static final Translator translator = Translator
			.getTranslator(CodeRangeBrowser.class);

	private final CodeRangeChooser codeRangeChooser = new CodeRangeChooser();
	private final CodeRangeViewer codeRangeViewer = new CodeRangeViewer();
	private final ParserTreeViewer codeTreeViewer = new ParserTreeViewer();

	private ProjectAnalyzer project = null;

	public CodeRangeBrowser() {
		super();
		initUI();
	}

	public CodeRangeBrowser(ProjectAnalyzer project) {
		super();
		initUI();
		setProjectAnalyser(project);
	}

	private void initUI() {
		codeRangeChooser.connect("fileChanged", this, "showFile", File.class);
		codeRangeChooser.connect("codeRangeChanged", this, "showCodeRange",
				CodeRange.class);

		TabbedPane tabbedViewer = new TabbedPane();
		tabbedViewer.setBorder(new TitledBorder(translator
				.i18n("Analysis Content")));
		tabbedViewer.add("Source Code", codeRangeViewer);
		tabbedViewer.add("Parser Tree", codeTreeViewer);

		setLayout(new BorderLayout());
		JSplitPane pane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
		add(pane, BorderLayout.CENTER);

		pane.add(codeRangeChooser);
		pane.add(tabbedViewer);
	}

	public void setProjectAnalyser(ProjectAnalyzer project) {
		this.project = project;
		refresh();
	}

	public void refresh() {
		codeRangeChooser.setProjectAnalyser(project);
	}

	@Slot
	public void showFile(File file) {
		ParserTree parserTree = project.getAnalyzer(file).getParserTree();
		codeRangeViewer.setParserTree(parserTree);
		codeTreeViewer.setParserTree(parserTree);
	}

	@Slot
	public void showCodeRange(CodeRange codeRange) {
		ParserTree parserTree = codeRange.getParserTree();
		codeRangeViewer.setParserTree(parserTree);
		codeTreeViewer.setParserTree(parserTree);
	}

}
