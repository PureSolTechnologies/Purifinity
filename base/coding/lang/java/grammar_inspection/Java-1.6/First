ExpressionStatement	{PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ExceptionType	{Identifier: (TERMINAL) }
_opt_autogen_26	{COMMA: (TERMINAL), _EMPTY_: (TERMINAL) }
CastExpression	{LPAREN: (TERMINAL) }
TypeParameter	{Identifier: (TERMINAL) }
BlockStatements_opt_autogen_66	{_EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), SEMICOLON: (TERMINAL), LCURLY: (TERMINAL), Identifier: (TERMINAL), IF: (TERMINAL), WHILE: (TERMINAL), BOOLEAN: (TERMINAL), ASSERT: (TERMINAL), SWITCH: (TERMINAL), DO: (TERMINAL), BREAK: (TERMINAL), CONTINUE: (TERMINAL), RETURN: (TERMINAL), SYNCHRONIZED: (TERMINAL), THROW: (TERMINAL), TRY: (TERMINAL), FOR: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
ClassBodyDeclarations_opt_autogen_20	{_EMPTY_: (TERMINAL), SEMICOLON: (TERMINAL), STATIC: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), LCURLY: (TERMINAL), LESS_THAN: (TERMINAL), Identifier: (TERMINAL), THROWS: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), VOID: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL) }
ClassOrInterfaceType	{Identifier: (TERMINAL) }
Annotations_opt_autogen_15	{_EMPTY_: (TERMINAL), AT: (TERMINAL) }
Finally	{FINALLY: (TERMINAL) }
LabeledStatementNoShortIf	{Identifier: (TERMINAL) }
ElementValuePairs_opt_autogen_61	{_EMPTY_: (TERMINAL), Identifier: (TERMINAL) }
TypeArguments_opt_autogen_87	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
TypeDeclarations	{SEMICOLON: (TERMINAL), _EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL) }
TypeImportOnDemandDeclaration	{IMPORT: (TERMINAL) }
TypeArguments_opt_autogen_83	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
VariableModifier	{FINAL: (TERMINAL), AT: (TERMINAL) }
TypeArguments_opt_autogen_84	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
TypeArguments_opt_autogen_86	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
BreakStatement	{BREAK: (TERMINAL) }
SwitchLabels_opt_autogen_69	{_EMPTY_: (TERMINAL), CASE: (TERMINAL), DEFAULT: (TERMINAL) }
TypeArguments_opt_autogen_81	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
ConstantModifiers	{PUBLIC: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), AT: (TERMINAL) }
ConditionalOrExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
LocalVariableDeclaration	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
_START_	{_EMPTY_: (TERMINAL), Sub: (TERMINAL), PACKAGE: (TERMINAL), SEMICOLON: (TERMINAL), IMPORT: (TERMINAL), AT: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL) }
InterfaceTypeList	{Identifier: (TERMINAL) }
IntegralType	{BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL) }
WildcardBounds_opt_autogen_10	{_EMPTY_: (TERMINAL), EXTENDS: (TERMINAL), SUPER: (TERMINAL) }
RelationalExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Dims	{LRECTANGULAR: (TERMINAL) }
MethodDeclarator	{Identifier: (TERMINAL) }
BlockStatement	{_EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), SEMICOLON: (TERMINAL), LCURLY: (TERMINAL), Identifier: (TERMINAL), IF: (TERMINAL), WHILE: (TERMINAL), BOOLEAN: (TERMINAL), ASSERT: (TERMINAL), SWITCH: (TERMINAL), DO: (TERMINAL), BREAK: (TERMINAL), CONTINUE: (TERMINAL), RETURN: (TERMINAL), SYNCHRONIZED: (TERMINAL), THROW: (TERMINAL), TRY: (TERMINAL), FOR: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
UnaryExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ExclusiveOrExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
AdditiveExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
MultiplicativeExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
TryStatement	{TRY: (TERMINAL) }
FormalParameterList	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), COMMA: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
SwitchBlock	{LCURLY: (TERMINAL) }
AbstractMethodModifiers	{PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), AT: (TERMINAL) }
Dims_opt_autogen_90	{_EMPTY_: (TERMINAL), LRECTANGULAR: (TERMINAL) }
VariableDeclarator	{Identifier: (TERMINAL) }
UnaryExpressionNotPlusMinus	{TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ConditionalExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Dims_opt_autogen_94	{LRECTANGULAR: (TERMINAL), _EMPTY_: (TERMINAL) }
SwitchLabel	{CASE: (TERMINAL), DEFAULT: (TERMINAL) }
Throws	{THROWS: (TERMINAL) }
VariableDeclarators	{Identifier: (TERMINAL) }
FloatingPointType	{FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
BlockStatements	{_EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), SEMICOLON: (TERMINAL), LCURLY: (TERMINAL), Identifier: (TERMINAL), IF: (TERMINAL), WHILE: (TERMINAL), BOOLEAN: (TERMINAL), ASSERT: (TERMINAL), SWITCH: (TERMINAL), DO: (TERMINAL), BREAK: (TERMINAL), CONTINUE: (TERMINAL), RETURN: (TERMINAL), SYNCHRONIZED: (TERMINAL), THROW: (TERMINAL), TRY: (TERMINAL), FOR: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
MethodModifiers_opt_autogen_22	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
Arguments_opt_autogen_45	{_EMPTY_: (TERMINAL), LPAREN: (TERMINAL) }
StatementExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
VariableModifiers_opt_autogen_76	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), AT: (TERMINAL) }
Expression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
TypeParameterList	{Identifier: (TERMINAL) }
Block	{LCURLY: (TERMINAL) }
ResultType	{VOID: (TERMINAL), BOOLEAN: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ArrayType	{BOOLEAN: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ForUpdate	{PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
StaticImportOnDemandDeclaration	{IMPORT: (TERMINAL) }
EnumConstants	{_EMPTY_: (TERMINAL), Identifier: (TERMINAL), COMMA: (TERMINAL), AT: (TERMINAL) }
FieldModifier	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), AT: (TERMINAL) }
_group_autogen_27	{COMMA: (TERMINAL) }
Annotations_opt_autogen_44	{_EMPTY_: (TERMINAL), AT: (TERMINAL) }
EnumConstant	{_EMPTY_: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL) }
TypeVariable	{Identifier: (TERMINAL) }
AnnotationTypeElementDeclarations_opt_autogen_58	{_EMPTY_: (TERMINAL), ENUM: (TERMINAL), AT: (TERMINAL), SEMICOLON: (TERMINAL), PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), BOOLEAN: (TERMINAL), CLASS: (TERMINAL), INTERFACE: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ElementValues	{PLUS: (TERMINAL), MINUS: (TERMINAL), AT: (TERMINAL), LCURLY: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Annotation	{AT: (TERMINAL) }
EqualityExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
PostfixExpression	{Identifier: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ForStatementNoShortIf	{FOR: (TERMINAL) }
ArgumentList	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ElementValues_opt_autogen_62	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), AT: (TERMINAL), LCURLY: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ImportDeclarations_opt_autogen_12	{_EMPTY_: (TERMINAL), IMPORT: (TERMINAL) }
ExtendsInterfaces_opt_autogen_51	{_EMPTY_: (TERMINAL), EXTENDS: (TERMINAL) }
MethodModifier	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
TypeDeclSpecifier	{Identifier: (TERMINAL) }
ConstantModifier	{PUBLIC: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), AT: (TERMINAL) }
TypeParameters_opt_autogen_32	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
Wildcard	{QUESTION_MARK: (TERMINAL) }
Primary	{NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), Identifier: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
InterfaceDeclaration	{_EMPTY_: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), STRICTFP: (TERMINAL) }
SingleTypeImportDeclaration	{IMPORT: (TERMINAL) }
Expression_opt_autogen_79	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ExplicitConstructorInvocation_opt_autogen_34	{_EMPTY_: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), LESS_THAN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), LPAREN: (TERMINAL), Identifier: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ImportDeclaration	{IMPORT: (TERMINAL) }
ClassBodyDeclaration	{SEMICOLON: (TERMINAL), STATIC: (TERMINAL), _EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), LCURLY: (TERMINAL), LESS_THAN: (TERMINAL), Identifier: (TERMINAL), THROWS: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), VOID: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL) }
InterfaceModifier	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
InterfaceBody	{LCURLY: (TERMINAL) }
Expression_opt_autogen_74	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
WildcardBounds	{EXTENDS: (TERMINAL), SUPER: (TERMINAL) }
LabeledStatement	{Identifier: (TERMINAL) }
Expression_opt_autogen_71	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
NormalClassDeclaration	{_EMPTY_: (TERMINAL), CLASS: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
MarkerAnnotation	{AT: (TERMINAL) }
PreIncrementExpression	{PLUS: (TERMINAL) }
MethodModifiers	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
Arguments	{LPAREN: (TERMINAL) }
Literal	{FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
DefaultValue_opt_autogen_60	{_EMPTY_: (TERMINAL), DEFAULT: (TERMINAL) }
Dims_opt_autogen_89	{_EMPTY_: (TERMINAL), LRECTANGULAR: (TERMINAL) }
TypeParameters_opt_autogen_23	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
TypeDeclaration	{SEMICOLON: (TERMINAL), _EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL) }
TypeArguments	{LESS_THAN: (TERMINAL) }
SwitchBlockStatementGroups_opt_autogen_68	{_EMPTY_: (TERMINAL), CASE: (TERMINAL), DEFAULT: (TERMINAL) }
COMMA_opt_autogen_42	{COMMA: (TERMINAL), _EMPTY_: (TERMINAL) }
VariableModifiers_opt_autogen_67	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), AT: (TERMINAL) }
StaticInitializer	{STATIC: (TERMINAL) }
StatementNoShortIf	{LCURLY: (TERMINAL), SEMICOLON: (TERMINAL), ASSERT: (TERMINAL), SWITCH: (TERMINAL), DO: (TERMINAL), BREAK: (TERMINAL), CONTINUE: (TERMINAL), RETURN: (TERMINAL), SYNCHRONIZED: (TERMINAL), THROW: (TERMINAL), TRY: (TERMINAL), Identifier: (TERMINAL), IF: (TERMINAL), WHILE: (TERMINAL), FOR: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
AbstractMethodModifier	{PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), AT: (TERMINAL) }
WhileStatementNoShortIf	{WHILE: (TERMINAL) }
EnumBodyDeclarations_opt_autogen_43	{_EMPTY_: (TERMINAL), SEMICOLON: (TERMINAL) }
Statement	{LCURLY: (TERMINAL), Identifier: (TERMINAL), IF: (TERMINAL), WHILE: (TERMINAL), SEMICOLON: (TERMINAL), ASSERT: (TERMINAL), SWITCH: (TERMINAL), DO: (TERMINAL), BREAK: (TERMINAL), CONTINUE: (TERMINAL), RETURN: (TERMINAL), SYNCHRONIZED: (TERMINAL), THROW: (TERMINAL), TRY: (TERMINAL), FOR: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
LeftHandSide	{SUPER: (TERMINAL), Identifier: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
DimExpr	{LRECTANGULAR: (TERMINAL) }
ConstructorDeclarator	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL), Identifier: (TERMINAL) }
ConstructorModifiers	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), AT: (TERMINAL) }
TypeParameters_opt_autogen_17	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
Super	{EXTENDS: (TERMINAL) }
ReferenceTypeList	{Identifier: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
NormalInterfaceDeclaration	{_EMPTY_: (TERMINAL), INTERFACE: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
ElementValueArrayInitializer	{LCURLY: (TERMINAL) }
ClassBodyDeclarations_opt_autogen_48	{_EMPTY_: (TERMINAL), SEMICOLON: (TERMINAL), STATIC: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), LCURLY: (TERMINAL), LESS_THAN: (TERMINAL), Identifier: (TERMINAL), THROWS: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), VOID: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL) }
FieldAccess	{SUPER: (TERMINAL), Identifier: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ForInit	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
EnumBody	{LCURLY: (TERMINAL) }
NonWildTypeArguments	{LESS_THAN: (TERMINAL) }
ElementValuePairs	{Identifier: (TERMINAL) }
VariableDeclaratorId	{Identifier: (TERMINAL) }
ConstructorModifier	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), AT: (TERMINAL) }
DimExprs	{LRECTANGULAR: (TERMINAL) }
EnumBodyDeclarations	{SEMICOLON: (TERMINAL) }
COMMA_opt_autogen_63	{COMMA: (TERMINAL), _EMPTY_: (TERMINAL) }
COMMA_opt_autogen_65	{COMMA: (TERMINAL), _EMPTY_: (TERMINAL) }
ClassBodyDeclarations	{SEMICOLON: (TERMINAL), STATIC: (TERMINAL), _EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), LCURLY: (TERMINAL), LESS_THAN: (TERMINAL), Identifier: (TERMINAL), THROWS: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), VOID: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL) }
TypeBound_opt_autogen_8	{_EMPTY_: (TERMINAL), EXTENDS: (TERMINAL) }
InterfaceMemberDeclaration	{SEMICOLON: (TERMINAL), _EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL), VOID: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
AnnotationTypeElementDeclarations	{_EMPTY_: (TERMINAL), ENUM: (TERMINAL), AT: (TERMINAL), SEMICOLON: (TERMINAL), PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), BOOLEAN: (TERMINAL), CLASS: (TERMINAL), INTERFACE: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
LastFormalParameter	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
PackageDeclaration	{_EMPTY_: (TERMINAL), PACKAGE: (TERMINAL), AT: (TERMINAL) }
TypeArguments_opt_autogen_1	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
InterfaceMemberDeclarations	{SEMICOLON: (TERMINAL), _EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL), VOID: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
TypeArguments_opt_autogen_2	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
MethodInvocation	{SUPER: (TERMINAL), Identifier: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
TypeArguments_opt_autogen_3	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
AnnotationTypeElementDeclaration	{_EMPTY_: (TERMINAL), ENUM: (TERMINAL), AT: (TERMINAL), SEMICOLON: (TERMINAL), PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), BOOLEAN: (TERMINAL), CLASS: (TERMINAL), INTERFACE: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
TypeArguments_opt_autogen_4	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
PreDecrementExpression	{MINUS: (TERMINAL) }
TypeArguments_opt_autogen_5	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
WhileStatement	{WHILE: (TERMINAL) }
TypeArguments_opt_autogen_6	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
TypeArguments_opt_autogen_7	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
FieldModifiers	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), AT: (TERMINAL) }
Interfaces_opt_autogen_19	{_EMPTY_: (TERMINAL), IMPLEMENTS: (TERMINAL) }
VariableModifiers_opt_autogen_28	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), AT: (TERMINAL) }
VariableModifiers_opt_autogen_29	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), AT: (TERMINAL) }
ClassBody	{LCURLY: (TERMINAL) }
ClassBody_opt_autogen_82	{LCURLY: (TERMINAL), _EMPTY_: (TERMINAL) }
ForStatement	{FOR: (TERMINAL) }
FieldModifiers_opt_autogen_21	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), AT: (TERMINAL) }
ClassBody_opt_autogen_85	{LCURLY: (TERMINAL), _EMPTY_: (TERMINAL) }
ClassBody_opt_autogen_88	{LCURLY: (TERMINAL), _EMPTY_: (TERMINAL) }
AssignmentOperator	{EQUALS: (TERMINAL), STAR: (TERMINAL), SLASH: (TERMINAL), PERCENT: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), LESS_THAN: (TERMINAL), GREATER_THAN: (TERMINAL), AMPERSAND: (TERMINAL), CARET: (TERMINAL), VERTICAL_BAR: (TERMINAL) }
AndExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ClassModifier	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
AnnotationTypeDeclaration	{_EMPTY_: (TERMINAL), AT: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), STRICTFP: (TERMINAL) }
NonWildTypeArguments_opt_autogen_93	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
NonWildTypeArguments_opt_autogen_91	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
NonWildTypeArguments_opt_autogen_92	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
ReturnStatement	{RETURN: (TERMINAL) }
PackageDeclaration_opt_autogen_11	{_EMPTY_: (TERMINAL), PACKAGE: (TERMINAL), AT: (TERMINAL) }
MethodDeclaration	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL), SEMICOLON: (TERMINAL), VOID: (TERMINAL), LCURLY: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL), STRICTFP: (TERMINAL), BOOLEAN: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
AbstractMethodDeclaration	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL), VOID: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), AT: (TERMINAL) }
AssertStatement	{ASSERT: (TERMINAL) }
ClassModifiers	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
PostDecrementExpression	{Identifier: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
DoStatement	{DO: (TERMINAL) }
AssignmentExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ForUpdate_opt_autogen_72	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ForUpdate_opt_autogen_75	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ExplicitConstructorInvocation	{_EMPTY_: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), LESS_THAN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), LPAREN: (TERMINAL), Identifier: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
FormalParameter	{_EMPTY_: (TERMINAL), BOOLEAN: (TERMINAL), FINAL: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), AT: (TERMINAL) }
NumericType	{BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
BasicForStatement	{FOR: (TERMINAL) }
NormalAnnotation	{AT: (TERMINAL) }
VariableModifiers	{FINAL: (TERMINAL), AT: (TERMINAL) }
PrimitiveType	{BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
SwitchStatement	{SWITCH: (TERMINAL) }
AnnotationTypeBody	{LCURLY: (TERMINAL) }
LocalVariableDeclarationStatement	{_EMPTY_: (TERMINAL), SEMICOLON: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ArrayAccess	{VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), Identifier: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), NEW: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
EnumConstants_opt_autogen_41	{_EMPTY_: (TERMINAL), Identifier: (TERMINAL), COMMA: (TERMINAL), AT: (TERMINAL) }
ThrowStatement	{THROW: (TERMINAL) }
ContinueStatement	{CONTINUE: (TERMINAL) }
StatementExpressionList	{PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Identifier_opt_autogen_78	{Identifier: (TERMINAL), _EMPTY_: (TERMINAL) }
PrimaryNoNewArray	{VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), Identifier: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), NEW: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Identifier_opt_autogen_77	{Identifier: (TERMINAL), _EMPTY_: (TERMINAL) }
SwitchBlockStatementGroups	{CASE: (TERMINAL), DEFAULT: (TERMINAL) }
TypeBound	{EXTENDS: (TERMINAL) }
ConstructorModifiers_opt_autogen_30	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), AT: (TERMINAL) }
Sub_opt_autogen_14	{Sub: (TERMINAL), _EMPTY_: (TERMINAL) }
ForInit_opt_autogen_70	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
ForInit_opt_autogen_73	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
AdditionalBound	{AMPERSAND: (TERMINAL) }
ExtendsInterfaces	{EXTENDS: (TERMINAL) }
SwitchBlockStatementGroup	{CASE: (TERMINAL), DEFAULT: (TERMINAL) }
ArrayInitializer	{LCURLY: (TERMINAL) }
TypeDeclarations_opt_autogen_13	{_EMPTY_: (TERMINAL), SEMICOLON: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL) }
TypeParameters_opt_autogen_50	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
ConstructorBody	{LCURLY: (TERMINAL) }
TypeParameters_opt_autogen_55	{LESS_THAN: (TERMINAL), _EMPTY_: (TERMINAL) }
MethodBody	{SEMICOLON: (TERMINAL), LCURLY: (TERMINAL) }
AdditionalBoundList	{AMPERSAND: (TERMINAL) }
ElementValue	{PLUS: (TERMINAL), MINUS: (TERMINAL), AT: (TERMINAL), LCURLY: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
FieldDeclaration	{_EMPTY_: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), AT: (TERMINAL) }
NonWildTypeArguments_opt_autogen_36	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
InterfaceMemberDeclarations_opt_autogen_52	{_EMPTY_: (TERMINAL), SEMICOLON: (TERMINAL), LESS_THAN: (TERMINAL), VOID: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
VariableInitializer	{PLUS: (TERMINAL), MINUS: (TERMINAL), LCURLY: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ShiftExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Interfaces	{IMPLEMENTS: (TERMINAL) }
ClassMemberDeclaration	{SEMICOLON: (TERMINAL), _EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), BOOLEAN: (TERMINAL), LESS_THAN: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), INTERFACE: (TERMINAL), AT: (TERMINAL), TRANSIENT: (TERMINAL), VOLATILE: (TERMINAL), Identifier: (TERMINAL), VOID: (TERMINAL), LCURLY: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL) }
Throws_opt_autogen_56	{THROWS: (TERMINAL), _EMPTY_: (TERMINAL) }
Super_opt_autogen_18	{_EMPTY_: (TERMINAL), EXTENDS: (TERMINAL) }
DefaultValue	{DEFAULT: (TERMINAL) }
VariableInitializers	{PLUS: (TERMINAL), MINUS: (TERMINAL), LCURLY: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ClassBody_opt_autogen_46	{LCURLY: (TERMINAL), _EMPTY_: (TERMINAL) }
IfThenStatement	{IF: (TERMINAL) }
NonWildTypeArguments_opt_autogen_37	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
NonWildTypeArguments_opt_autogen_38	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL) }
ActualTypeArgument	{Identifier: (TERMINAL), QUESTION_MARK: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ArgumentList_opt_autogen_47	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
BlockStatements_opt_autogen_35	{_EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), SEMICOLON: (TERMINAL), LCURLY: (TERMINAL), Identifier: (TERMINAL), IF: (TERMINAL), WHILE: (TERMINAL), BOOLEAN: (TERMINAL), ASSERT: (TERMINAL), SWITCH: (TERMINAL), DO: (TERMINAL), BREAK: (TERMINAL), CONTINUE: (TERMINAL), RETURN: (TERMINAL), SYNCHRONIZED: (TERMINAL), THROW: (TERMINAL), TRY: (TERMINAL), FOR: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL) }
FormalParameterList_opt_autogen_25	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), COMMA: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
IfThenElseStatementNoShortIf	{IF: (TERMINAL) }
ConstantDeclaration	{_EMPTY_: (TERMINAL), BOOLEAN: (TERMINAL), PUBLIC: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), AT: (TERMINAL) }
InclusiveOrExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ConditionalAndExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
SwitchLabels	{CASE: (TERMINAL), DEFAULT: (TERMINAL) }
ArrayCreationExpression	{NEW: (TERMINAL) }
IfThenElseStatement	{IF: (TERMINAL) }
Catches_opt_autogen_80	{_EMPTY_: (TERMINAL), CATCH: (TERMINAL) }
PostIncrementExpression	{Identifier: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ConstructorDeclaration	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL), Identifier: (TERMINAL), THROWS: (TERMINAL), LCURLY: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), AT: (TERMINAL) }
AbstractMethodModifiers_opt_autogen_54	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), AT: (TERMINAL) }
Catches	{CATCH: (TERMINAL) }
EnumDeclaration	{_EMPTY_: (TERMINAL), ENUM: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
CatchClause	{CATCH: (TERMINAL) }
ClassModifiers_opt_autogen_39	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
FormalParameterList_opt_autogen_33	{_EMPTY_: (TERMINAL), FINAL: (TERMINAL), BOOLEAN: (TERMINAL), COMMA: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
InterfaceModifiers_opt_autogen_57	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
ElementValuePair	{Identifier: (TERMINAL) }
ConstantExpression	{PLUS: (TERMINAL), MINUS: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
AbstractMethodModifiers_opt_autogen_59	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), ABSTRACT: (TERMINAL), AT: (TERMINAL) }
InstanceInitializer	{LCURLY: (TERMINAL) }
FormalParameters	{_EMPTY_: (TERMINAL), COMMA: (TERMINAL), BOOLEAN: (TERMINAL), FINAL: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL), AT: (TERMINAL) }
ClassInstanceCreationExpression	{NEW: (TERMINAL), Identifier: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), SUPER: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ConstantModifiers_opt_autogen_53	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), AT: (TERMINAL) }
StatementWithoutTrailingSubstatement	{LCURLY: (TERMINAL), SEMICOLON: (TERMINAL), ASSERT: (TERMINAL), SWITCH: (TERMINAL), DO: (TERMINAL), BREAK: (TERMINAL), CONTINUE: (TERMINAL), RETURN: (TERMINAL), SYNCHRONIZED: (TERMINAL), THROW: (TERMINAL), TRY: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), Identifier: (TERMINAL), SUPER: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ActualTypeArgumentList	{Identifier: (TERMINAL), QUESTION_MARK: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Throws_opt_autogen_31	{THROWS: (TERMINAL), _EMPTY_: (TERMINAL) }
Type	{BOOLEAN: (TERMINAL), Identifier: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
ReferenceType	{Identifier: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
Assignment	{SUPER: (TERMINAL), Identifier: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
CompilationUnit	{_EMPTY_: (TERMINAL), Sub: (TERMINAL), PACKAGE: (TERMINAL), SEMICOLON: (TERMINAL), IMPORT: (TERMINAL), AT: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), INTERFACE: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL) }
MethodHeader	{_EMPTY_: (TERMINAL), LESS_THAN: (TERMINAL), VOID: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), SYNCHRONIZED: (TERMINAL), NATIVE: (TERMINAL), STRICTFP: (TERMINAL), BOOLEAN: (TERMINAL), Identifier: (TERMINAL), AT: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
InterfaceModifiers_opt_autogen_49	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
SingleElementAnnotation	{AT: (TERMINAL) }
InterfaceModifiers	{PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
Annotations	{AT: (TERMINAL) }
SynchronizedStatement	{SYNCHRONIZED: (TERMINAL) }
ImportDeclarations	{IMPORT: (TERMINAL) }
ExceptionTypeList	{Identifier: (TERMINAL) }
TypeParameters	{LESS_THAN: (TERMINAL) }
Throws_opt_autogen_24	{_EMPTY_: (TERMINAL), THROWS: (TERMINAL) }
InterfaceType	{Identifier: (TERMINAL) }
EnhancedForStatement	{FOR: (TERMINAL) }
SingleStaticImportDeclaration	{IMPORT: (TERMINAL) }
EmptyStatement	{SEMICOLON: (TERMINAL) }
ClassType	{Identifier: (TERMINAL) }
Name	{Identifier: (TERMINAL) }
VariableInitializers_opt_autogen_64	{_EMPTY_: (TERMINAL), PLUS: (TERMINAL), MINUS: (TERMINAL), LCURLY: (TERMINAL), TILDE: (TERMINAL), EXCLAMATION_MARK: (TERMINAL), Identifier: (TERMINAL), LPAREN: (TERMINAL), NEW: (TERMINAL), VOID: (TERMINAL), THIS: (TERMINAL), SUPER: (TERMINAL), FloatingPointLiteral: (TERMINAL), IntegerLiteral: (TERMINAL), BooleanLiteral: (TERMINAL), CharacterLiteral: (TERMINAL), StringLiteral: (TERMINAL), NullLiteral: (TERMINAL), BOOLEAN: (TERMINAL), BYTE: (TERMINAL), SHORT: (TERMINAL), INT: (TERMINAL), LONG: (TERMINAL), CHAR: (TERMINAL), FLOAT: (TERMINAL), DOUBLE: (TERMINAL) }
AdditionalBoundList_opt_autogen_9	{_EMPTY_: (TERMINAL), AMPERSAND: (TERMINAL) }
ClassModifiers_opt_autogen_16	{_EMPTY_: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
ClassDeclaration	{_EMPTY_: (TERMINAL), CLASS: (TERMINAL), ENUM: (TERMINAL), PUBLIC: (TERMINAL), PROTECTED: (TERMINAL), PRIVATE: (TERMINAL), ABSTRACT: (TERMINAL), STATIC: (TERMINAL), FINAL: (TERMINAL), STRICTFP: (TERMINAL), AT: (TERMINAL) }
Interfaces_opt_autogen_40	{IMPLEMENTS: (TERMINAL), _EMPTY_: (TERMINAL) }
