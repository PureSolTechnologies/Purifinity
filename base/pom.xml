<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

    <properties>
        <commons.version>0.0.1-SNAPSHOT</commons.version>
    </properties>

	<parent>
		<groupId>com.puresol.commons</groupId>
		<artifactId>parent.java</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<groupId>com.puresol</groupId>
	<artifactId>base</artifactId>
	<version>0.1.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>Library parent module</name>

	<repositories>
		<repository>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>central</id>
			<name>libs-release</name>
			<url>http://server1:8080/artifactory/libs-release</url>
		</repository>
		<repository>
			<snapshots />
			<id>snapshots</id>
			<name>libs-snapshot</name>
			<url>http://server1:8080/artifactory/libs-snapshot</url>
		</repository>
	</repositories>

	<profiles>
		<profile>
			<id>it</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<forkMode>always</forkMode>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencyManagement>
		<dependencies>
			<!-- Project internal -->
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.analysis.api.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.analysis.impl.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.analysis.test</artifactId>
				<version>${project.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.evaluation.api.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.evaluation.impl.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.lang.api.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.lang.c11.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.lang.commons.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.lang.cpp.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.lang.fortran.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.lang.java.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.metrics.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>coding.store.fs.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>commons.osgi</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>commons.test</artifactId>
				<version>${project.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>license.api.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>license.creator.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>license.impl.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>license.test</artifactId>
				<version>${project.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>trees.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>uhura.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>uhura.test</artifactId>
				<version>${project.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.puresol</groupId>
				<artifactId>utils.lib</artifactId>
				<version>${project.version}</version>
			</dependency>
			<!-- IMPORTS -->
			<dependency>
				<groupId>com.puresol.commons</groupId>
				<artifactId>dependency.apache-commons</artifactId>
				<version>${commons.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.puresol.commons</groupId>
				<artifactId>dependency.osgi</artifactId>
				<version>${commons.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<extensions>true</extensions>
					<configuration>
						<manifestLocation>META-INF</manifestLocation>
						<instructions>
							<!-- The Bundle-SymbolicName is fixed in this way. Otherwise Tycho 
								will not find the bundle. -->
							<Bundle-SymbolicName>${project.groupId}.${project.artifactId}</Bundle-SymbolicName>
							<Bundle-Name>${project.groupId}.${project.artifactId}</Bundle-Name>
							<Bundle-Version>${project.version}</Bundle-Version>
							<Bundle-Vendor>${project.organization.name}</Bundle-Vendor>
							<!-- assume public classes are in the top package, and private classes 
								are under ".internal" -->
							<Export-Package>!${bundle.namespace}.internal.*,${bundle.namespace}.*;version="${project.version}"</Export-Package>
							<Private-Package>${bundle.namespace}.internal.*</Private-Package>
							<Bundle-Activator>${bundle.namespace}.Activator</Bundle-Activator>
							<!-- embed compile/runtime dependencies using path that matches the 
								copied dependency folder -->
							<Embed-Dependency>*;scope=compile|runtime;inline=false</Embed-Dependency>
							<Embed-Directory>target/dependency</Embed-Directory>
							<Embed-StripGroup>true</Embed-StripGroup>
							<Bundle-ActivationPolicy>lazy</Bundle-ActivationPolicy>
						</instructions>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<inherited>false</inherited>
					<executions>
						<execution>
							<id>CleanManifest</id>
							<inherited>true</inherited>
							<phase>clean</phase>
							<goals>
								<goal>clean</goal>
							</goals>
							<configuration>
								<filesets>
									<fileset>
										<directory>META-INF</directory>
									</fileset>
								</filesets>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<modules>
		<module>commons</module>
		<module>license</module>
		<module>trees</module>
		<module>utils</module>
		<module>uhura</module>
		<module>coding</module>
		<!-- module>thirdparty</module -->
	</modules>

</project>
